import numpy as np
import tensorflow as tf

# image_size = 128,128

w, h = 128, 128
#######################################################
# For [ u1 , u2 , u3 , u4 , v1 , v2 , v3 , v4 ]
# Aux_M1  = np.array([
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 1 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 1 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 1  , 0 , 0 , 0 , 0 ]], dtype=np.float64)


# Aux_M2  = np.array([
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 1 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 1 ]], dtype=np.float64)


# Aux_M3  = np.array([
#           [0],
#           [1],
#           [0],
#           [1],
#           [0],
#           [1],
#           [0],
#           [1]], dtype=np.float64)


# Aux_M4  = np.array([
#           [-1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 ,-1 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  ,-1 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 ,-1 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ]], dtype=np.float64)


# Aux_M5  = np.array([
#           [0 ,-1 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 ,-1  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 ,-1 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 ,-1 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ]], dtype=np.float64)



# Aux_M6  = np.array([
#           [-1 ],
#           [ 0 ],
#           [-1 ],
#           [ 0 ],
#           [-1 ],
#           [ 0 ],
#           [-1 ],
#           [ 0 ]], dtype=np.float64)


# Aux_M71 = np.array([
#           [0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
#           [1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 1 , 0 , 0 ],
#           [0 , 1 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ],
#           [0 , 0 , 1 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 1 ],
#           [0 , 0 , 0 , 1  , 0 , 0 , 0 , 0 ]], dtype=np.float64)


# Aux_M72 = np.array([
#           [ 0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
#           [-1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 1 , 0 , 0 ],
#           [ 0 ,-1 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ],
#           [ 0 , 0 ,-1 , 0  , 0 , 0 , 0 , 0 ],
#           [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 1 ],
#           [ 0 , 0 , 0 ,-1  , 0 , 0 , 0 , 0 ]], dtype=np.float64)



# Aux_M8  = np.array([
#           [0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  ,-1 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 1 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 ,-1 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 ,-1 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 , 1 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 ,-1 ]], dtype=np.float64)


# Aux_Mb  = np.array([
#           [0 , 0 , 0 , 0  ,-1 , 0 , 0 , 0 ],
#           [1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 ,-1 , 0 , 0 ],
#           [0 , 1 , 0 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 ,-1 , 0 ],
#           [0 , 0 , 1 , 0  , 0 , 0 , 0 , 0 ],
#           [0 , 0 , 0 , 0  , 0 , 0 , 0 ,-1 ],
#           [0 , 0 , 0 , 1  , 0 , 0 , 0 , 0 ]], dtype=np.float64)


####### for [ u1 , v1 , u2 , v2 , u3 , v3 , u4 , v4 ]

## Gives first column -- [ 0 , u1 , 0 , u2 , 0 , u3 , 0 , u4 ]
Aux_M1  = np.array([
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 1 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ]], dtype=np.float64)

### Gives second column -- [ 0 , v1 , 0 , v2 , 0 , v3 , 0 , v4 ]
Aux_M2  = np.array([
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 1 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 1  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 1 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [ 0 , 0 , 0 , 0  , 0 , 0 , 0 , 1 ]], dtype=np.float64)

### Gives third column -- [ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ]
Aux_M3  = np.array([
          [0],
          [1],
          [0],
          [1],
          [0],
          [1],
          [0],
          [1]], dtype=np.float64)

### Gives fourth column -- [ -u1 , 0 , -u2 , 0 -u3 , 0 , -u4 , 0 ]
Aux_M4  = np.array([
          [-1, 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 ,-1 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  ,-1 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 ,-1 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ]], dtype=np.float64)

### Gives fifth column -- [ -v1 , 0 , -v2 , 0 -v3 , 0 , -v4 , 0 ]
Aux_M5  = np.array([
          [0 ,-1 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 ,-1  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 ,-1 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 ,-1 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ]], dtype=np.float64)


## Gives sixth column
Aux_M6  = np.array([
          [-1 ],
          [ 0 ],
          [-1 ],
          [ 0 ],
          [-1 ],
          [ 0 ],
          [-1 ],
          [ 0 ]], dtype=np.float64)

### First part of seventh column and 8th column
### [ v1' , u1' , v2' , u2' , v3' , u3' , v4' , u4'  ]
Aux_M71 = np.array([
          [0 , 1 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 1  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 1 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 1 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 1 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ]], dtype=np.float64)

### Second part of 7th column --- [ u1 , -u1 , u2 , -u2 , u3 , -u3 , u4 , -u4 ]
Aux_M72 = np.array([
          [1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [-1, 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 1 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 ,-1 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  ,-1 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 ,-1 , 0 ]], dtype=np.float64)


### Second part of 8th column --- [ v1 , -v1 , v2 , -v2 , v3 , -v3 , v4 , -v4 ]
Aux_M8  = np.array([
          [0 , 1 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 ,-1 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 1  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 ,-1  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 1 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 ,-1 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 , 1 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 ,-1 ]], dtype=np.float64)

### Gives B matrix to solve AX = B
### ----- [ -v' , u' ] -- [ -v1' , u1' , -v2' , u2' , -v3' , u3' , -v4' , u4' ]
Aux_Mb  = np.array([
          [0 ,-1 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [1 , 0 , 0 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , -1 , 0 , 0 , 0 , 0 ],
          [0 , 0 , 1 , 0  , 0 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 ,-1 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 1 , 0 , 0 , 0 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 0 ,-1 ],
          [0 , 0 , 0 , 0  , 0 , 0 , 1 , 0 ]], dtype=np.float64)

M = np.array([[w/2 , 0 , w/2],
                 [ 0 , h/2 , h/2],
                 [ 0 ,  0 ,  1]])

M_inv = np.linalg.inv(M)

corners_ = np.array([0,0,128,0,128,128,0,128])

